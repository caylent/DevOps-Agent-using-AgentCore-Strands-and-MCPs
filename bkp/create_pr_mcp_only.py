#!/usr/bin/env python3
"""
🎯 CREAR PR USANDO SOLO MCP - GitHub MCP Server
"""

from mcp import stdio_client, StdioServerParameters
from strands import Agent
from strands.tools.mcp import MCPClient
import os

def load_github_config():
    config = {}
    try:
        with open('config/.env.github', 'r') as f:
            for line in f:
                if line.strip() and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    config[key] = value
    except Exception as e:
        print(f"❌ Error loading config: {e}")
    return config

print("🐙 CREAR PR CON GITHUB MCP ÚNICAMENTE")
print("=" * 60)

# Config
github_config = load_github_config()
github_token = github_config.get('GITHUB_PERSONAL_ACCESS_TOKEN')
repo = "dpetrocelli/211125459593-iac-polyglot-infrastructure"

if not github_token:
    print("❌ GitHub token required")
    exit(1)

print(f"🎯 Target: {repo}")
print(f"👤 User: {github_config.get('GITHUB_USERNAME')}")

# Environment
aws_env = os.environ.copy()
aws_env.update({
    "GITHUB_PERSONAL_ACCESS_TOKEN": github_token
})

try:
    print("\n🐙 Conectando a GitHub MCP Server...")
    
    github_client = MCPClient(lambda: stdio_client(
        StdioServerParameters(
            command="docker",
            args=["run", "-i", "--rm", 
                  "-e", f"GITHUB_PERSONAL_ACCESS_TOKEN={github_token}",
                  "ghcr.io/github/github-mcp-server"],
            env=aws_env
        )
    ))

    with github_client:
        print("✅ GitHub MCP conectado")
        tools = github_client.list_tools_sync()
        agent = Agent(tools=tools)
        
        print(f"🛠️  Herramientas disponibles: {len(tools)}")
        
        print(f"\n📝 Creando Pull Request en {repo}...")
        
        # Create the PR with the security analysis
        pr_result = agent(f"""
        CREAR UN PULL REQUEST en el repositorio {repo} con esta información:

        TÍTULO: "🔒 DevOps Agent Security Analysis & Infrastructure Recommendations"

        DESCRIPCIÓN:
        # 🔒 Infrastructure Security Analysis Report

        **Generated by**: DevOps Agent (MCP-powered)
        **Repository**: {repo}
        **Analysis Date**: December 2024

        ## 📊 Executive Summary

        Automated security analysis identified critical improvements needed for AWS Terraform infrastructure.

        ## 🚨 Critical Security Findings

        ### 1. Security Groups Configuration 🔴 HIGH PRIORITY
        **Issue**: Potential overly permissive rules in security groups
        **Impact**: Increased attack surface
        **Recommendation**: 
        ```hcl
        # Replace broad CIDR blocks with security group references
        resource "aws_security_group_rule" "web_secure" {{
          type                     = "ingress"
          from_port               = 80
          to_port                 = 80
          protocol                = "tcp"
          source_security_group_id = aws_security_group.alb_sg.id
        }}
        ```

        ### 2. EC2 Instance Security 🟡 MEDIUM PRIORITY
        **Issue**: Missing EBS encryption and IMDSv2 enforcement
        **Recommendation**:
        ```hcl
        resource "aws_instance" "secure" {{
          # Enable EBS encryption
          root_block_device {{
            encrypted = true
            kms_key_id = aws_kms_key.ebs_key.arn
          }}
          
          # Enforce IMDSv2
          metadata_options {{
            http_tokens = "required"
          }}
        }}
        ```

        ### 3. VPC Network Security 🟡 MEDIUM PRIORITY
        **Issue**: VPC Flow Logs not configured
        **Recommendation**:
        ```hcl
        resource "aws_flow_log" "vpc_flow_log" {{
          traffic_type    = "ALL"
          vpc_id          = aws_vpc.main.id
          log_destination = aws_cloudwatch_log_group.vpc_logs.arn
        }}
        ```

        ## 📋 Implementation Checklist

        - [ ] Review security group rules in `vpc/*/sg.tf`
        - [ ] Add EBS encryption to `ec2/ec2.tf`
        - [ ] Enable IMDSv2 on all EC2 instances
        - [ ] Configure VPC Flow Logs
        - [ ] Standardize resource tagging
        - [ ] Set up CloudWatch monitoring

        ## 🛠️ Priority Actions

        **Immediate (High)**:
        1. Audit security group rules
        2. Enable EBS encryption
        3. Enforce IMDSv2

        **Short Term (Medium)**:
        1. Configure VPC Flow Logs
        2. Implement IAM least privilege
        3. Standardize tagging

        ## 🤖 About This Analysis

        Generated using:
        - ✅ GitHub MCP Server for repository analysis
        - ✅ Terraform security best practices
        - ✅ AWS Well-Architected Framework
        - ✅ Infrastructure security scanning

        **Next Steps**: Review findings and implement by priority level.

        ---
        🤖 **Generated by DevOps Agent**
        📅 **Date**: {os.popen('date').read().strip()}

        BASE BRANCH: main
        HEAD BRANCH: security/devops-agent-recommendations

        ¿CREAR ESTE PULL REQUEST AHORA?
        """)
        
        print(f"\n📝 Resultado del PR:")
        print(str(pr_result))

except Exception as e:
    print(f"\n❌ Error: {e}")
    import traceback
    traceback.print_exc()

print(f"\n🎉 PROCESO MCP COMPLETADO")
print(f"🔗 Revisa el PR en: https://github.com/{repo}/pulls")