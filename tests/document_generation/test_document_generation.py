#!/usr/bin/env python3
"""
Test Document Generation Functionality
"""

import os
import sys
import tempfile
from pathlib import Path

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_document_generation():
    """Test document generation functionality"""
    print("🧪 Testing Document Generation")
    print("=" * 50)
    
    try:
        from aws_devops_agent.tools.reporting.document_generator import (
            generate_document,
            generate_cost_analysis_document,
            list_generated_documents
        )
        
        print("✅ Successfully imported document generation tools")
        
        # Test 1: Generate a simple document
        print("\n1️⃣ Testing simple document generation...")
        simple_content = {
            "title": "Test Report",
            "summary": "This is a test report generated by the AWS DevOps Agent",
            "findings": [
                "Finding 1: Test finding",
                "Finding 2: Another test finding"
            ],
            "recommendations": [
                "Recommendation 1: Test recommendation",
                "Recommendation 2: Another test recommendation"
            ]
        }
        
        result = generate_document(
            content=simple_content,
            title="Test Report",
            document_type="general",
            format="markdown"
        )
        
        if result["status"] == "success":
            print(f"✅ Document generated successfully!")
            print(f"   📁 File: {result['file_path']}")
            print(f"   📄 Filename: {result['filename']}")
            print(f"   📊 Type: {result['report_type']}")
        else:
            print(f"❌ Document generation failed: {result['error']}")
        
        # Test 2: Generate a cost analysis document
        print("\n2️⃣ Testing cost analysis document generation...")
        cost_data = {
            "total_monthly_cost": 1500.00,
            "potential_savings": 300.00,
            "optimization_opportunities": [
                {
                    "resource": "EC2 Instance",
                    "current_cost": 800.00,
                    "potential_savings": 200.00,
                    "recommendation": "Right-size instance",
                    "priority": "high"
                }
            ],
            "recommendations": [
                {"recommendation": "Implement Reserved Instances", "priority": "high"},
                {"recommendation": "Right-size EC2 instances", "priority": "medium"},
                {"recommendation": "Use Spot Instances for non-critical workloads", "priority": "low"}
            ],
            "cost_breakdown": {
                "by_service": {"EC2": 800, "RDS": 400, "S3": 200, "Other": 100},
                "by_region": {"us-east-1": 1000, "us-west-2": 500},
                "by_account": {"prod": 1200, "dev": 300}
            },
            "resource_analysis": {
                "underutilized": ["i-1234567890abcdef0"],
                "overprovisioned": ["i-0987654321fedcba0"],
                "unused": ["vol-1234567890abcdef0"]
            },
            "trend_analysis": {
                "cost_trends": ["Increasing by 5% monthly"],
                "usage_patterns": ["Peak usage during business hours"],
                "forecast": {"next_month": 1575, "next_quarter": 1650}
            }
        }
        
        result = generate_cost_analysis_document(
            cost_data=cost_data,
            title="AWS Cost Analysis Report"
        )
        
        if result["status"] == "success":
            print(f"✅ Cost analysis document generated successfully!")
            print(f"   📁 File: {result['file_path']}")
            print(f"   📄 Filename: {result['filename']}")
        else:
            print(f"❌ Cost analysis document generation failed: {result['error']}")
        
        # Test 3: List generated documents
        print("\n3️⃣ Testing document listing...")
        result = list_generated_documents(limit=5)
        
        if result["status"] == "success":
            print(f"✅ Found {result['showing']} documents")
            for doc in result["reports"][:3]:  # Show first 3
                print(f"   📄 {doc['filename']} ({doc['report_type']}) - {doc['size_bytes']} bytes")
        else:
            print(f"❌ Document listing failed: {result['error']}")
        
        print("\n🎉 Document generation test completed!")
        print("📁 Check the 'reports/' folder for generated documents")
        
    except Exception as e:
        print(f"❌ Test failed with error: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    test_document_generation()
